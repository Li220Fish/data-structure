#include <iostream>
#include <stdlib.h> 
#include <time.h> 

using namespace std;

int times = 0;

struct node{ // set every node
    int coef_;
    int exp_;
    struct node* next;
};

node* add_poly(int x, int y,node* temp) 
{ 
    node* newnode = new node; //new node
    newnode->coef_ = x; 
    newnode->exp_ = y; 
    newnode->next = NULL; 
  

    if (temp == NULL) // NULL
        return newnode; 
  
    
    node* ptr = temp; 
    while (ptr->next != NULL) 
        ptr = ptr->next; 
    ptr->next = newnode; 
  
    return temp; 
} 


void show(struct node* Node){ // show poly
    while(Node -> next != NULL){
        cout<<Node ->coef_<<"x^"<<Node ->exp_;
        Node = Node->next;
        if(Node->coef_ >= 0){
            if (Node ->next != NULL) cout<<"+";
        }
    }
    cout<<endl;
}


void remove_same(node * poly){
    node *ptr1 , *ptr2 ,*due;
    ptr1 = poly;
    
    while (ptr1!= NULL && ptr1 ->next != NULL){
        ptr2 = ptr1;
        
        while (ptr2->next != NULL){
            if(ptr1->exp_ == ptr2->next->exp_){ //當前exp == 下一個exp
                ptr1->coef_ = ptr1->coef_ + ptr2->next->coef_; //常數相加
                due = ptr2 -> next;
                ptr2->next = ptr2->next->next; //指向下一個
                delete(due);//刪除當前的
                //times ++;
                
            }else{
                ptr2 = ptr2 ->next;
            }
            
        }
        ptr1 = ptr1->next;
    }
}

void mul(node* poly1, node* poly2, node* poly){
    node *ptr1 ,*ptr2;
    ptr1 = poly1;
    
    ptr2 = poly2;
    double START,END; START = clock();

    while (ptr1 != NULL){
        while (ptr2 != NULL){
            int sum_coef , sum_exp;
            
            sum_coef = ptr1 -> coef_ * ptr2 -> coef_; //係數相乘
            sum_exp = ptr1 -> exp_ + ptr2 -> exp_ ; // 指數相加
            

            /*add_poly(sum_coef, sum_exp, &poly); //指給新poly
            ptr2 = ptr2 -> next;
            times ++;*/
            
            if(sum_coef == 0){
                ptr2 = ptr2 -> next;
            }else{
                poly = add_poly(sum_coef, sum_exp, poly); //指給新poly
                ptr2 = ptr2 -> next;
                times ++;
            }
            
        }
        
        ptr2 = poly2;
        ptr1 = ptr1 -> next;
        
    }
    poly = add_poly(0, 0, poly);
    END = clock();
    remove_same(poly);
    cout<<"mul:";
    show(poly);
    cout<<endl;
    cout << "Time:"<<(END - START) / CLOCKS_PER_SEC<<endl;
    cout<<"O(n,m):"<<times;
    cout<<endl;
    
}


int main()
{
    srand( time(NULL) );
    struct node *poly1 = NULL , *poly2 = NULL , *poly = NULL ;
    int n ,m , in_coef , in_exp;
    
    cin>> n >> m;
   
    
    cout<<"poly1"<<endl;
    for(int i=0; i<n;i++){
        cin >> in_coef >>in_exp;
        poly1 = add_poly(in_coef ,in_exp , poly1);
        
    }
    poly1 = add_poly(0 ,0 , poly1);
    show(poly1);
   
   cout<<"poly2(m)"<<endl;
    for(int i=0;i<m;i++){
        cin >> in_coef >> in_exp;
        poly2 = add_poly(in_coef , in_exp , poly2);
    }
    poly2 = add_poly(0 ,0 , poly2);
    show(poly2);
    cout<<endl;
    
    mul(poly1,poly2,poly);

    return 0;
}
