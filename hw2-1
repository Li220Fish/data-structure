#include <iostream>

using namespace std;

class Complex {
    public: 
        Complex (int r, int i) : real(r), image(i) {} // 建構初始值實數,虛數
        Complex operator+ (Complex &other); // 加法
        Complex operator* (Complex &other); // 乘法
        friend ostream& operator<< (ostream& os, Complex& complex); // output
        friend istream& operator>> (istream& is, Complex& complex); // input
    private:
        double real , image;
};

Complex Complex::operator+(Complex &other){
    return Complex(real + other.real , image + other.image);
}

Complex Complex::operator*(Complex &other){
    //(a+bi)*(c+di) = (a*c-b*d )+ (a*di + c*bi)
    return Complex(real * other.real - image * other.image , real * other.image + image * other.real);
}

ostream &operator<<(ostream& os, Complex& complex){ //os's output 
    if(complex.image <0) os<<complex.real<<complex.image<<"i"<<endl;
    else os<<complex.real<<"+"<<complex.image<<"i"<<endl;
    return os;
}

istream &operator>>(istream& is, Complex& complex){ // os's input

    cout <<"please input a Complex => real image"<<endl;
    cin >> complex.real;
    cin >> complex.image; 
    return is;
}

int main(){
    Complex frist_type_0 = Complex(0 , 0); 
    Complex frist_type_1 = Complex(3 , 2);
    Complex add_sum = Complex(0 , 0);
    Complex mul_sum = Complex(0 , 0);
    
    Complex user_input_0 = Complex(0 , 0);
    Complex user_input_1 = Complex(0 , 0);
    
    
    cout << "frist complex => "<< frist_type_0 << "second complex => "<< frist_type_1 <<endl;
    
    cout <<"third ";
    cin>> user_input_0;
    cout <<"fourth ";
    cin>> user_input_1;
    
    add_sum = frist_type_0 + frist_type_1 + user_input_0 + user_input_1;
    mul_sum = frist_type_0 * frist_type_1 * user_input_0 * user_input_1;
    cout << "complex add sum => "<<add_sum;
    cout << "complex add mul => "<<mul_sum;
    
    return 0;
}
